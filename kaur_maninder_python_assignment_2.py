# -*- coding: utf-8 -*-
"""KAUR_MANINDER_python_assignment_2 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CVpu5-YU2x3JJ7BywJ8jfG3_VS813CYT

## Pandas and Visualization

### Getting Data
Selected a dataset from [Toronto Open Data](https://open.toronto.ca/catalogue/) or another data portal of your choice, and downloaded it.
*[Apartment building evaluations](https://open.toronto.ca/dataset/apartment-building-evaluation/)

### Metadata Review
1. What organization publishes this dataset?

**Answer : RentSafeTO, Municipal Licensing & Standards**

2. How frequently is the dataset updated?

**Daily**

3. What metadata is available (e.g., column names, data types, descriptions)?

**data type - table**

4. Is there documentation about who or what produces the data? About who collects it? Through what processes?

**RentSafeTO: Apartment Building Standards is a bylaw enforcement program established in 2017 to ensure that owners and operators of apartment buildings with three or more storeys or 10 or more units comply with building maintenance standards. Learn more about RentSafeTO. This dataset contains building evaluation scores for buildings registered with RentSafeTO. During evaluations, Bylaw Enforcement Officers inspect common areas, mechanical and security systems, parking and exterior grounds. In 2023, RentsafeTO updated its evaluation process. Buildings must undergo evaluation at least once every two years, increasing the number of evaluation categories to 50 and allocating a weight to the category. Each category item is inspected and assigned a score from one to three with one being the lowest and three being the highest. At times, an item may be assigned a score of 0 if it cannot be evaluated due to an obstruction or refusal to inspect. Additionally, if an item is not applicable to the building at the time of evaluation, the score will show as blank in the dataset.**

5. Is there documentation about limitations of the data, such as possible sources of error or omission?

**There is a section on data quality that defines its last refreshed date, metadata issues, accessibility, completeness or usability issues. As such, there are no possible sources of errors or omission**

6. Are there any restrictions concerning data access or use? (e.g.,registraton required or non-commercial use only)

**This dataset hasn't been associated with any additional, searchable keywords**

### Getting started
1. Load the data to a single DataFrame.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#display all columns
pd.set_option("display.max_columns", None)

data_2023 = pd.read_csv('Pre-2023 Apartment Building Evaluations.csv')

"""5. Select a single column and find its unique values."""

data_2023['WARDNAME'].unique()

"""6. Select a single text/categorical column and find the counts of its values."""

data_2023['WARDNAME'].value_counts()

"""7. Convert the data type of at least one of the columns. If all columns are typed correctly, convert one to `str` and back."""

data_2023['WARD']=data_2023['WARD'].astype('str')

data_2023['WARD'].dtype

data_2023['WARD']=data_2023['WARD'].astype('int64')
data_2023['WARD'].dtype

"""8. Write the DataFrame to a different file format than the original."""

# data_2023.to_excel('Pre-2023_data.xlsx')

"""### More data wrangling, filtering
1. Create a column derived from an existing one. Some possibilities:
   * Bin a continuous variable
   * Extract a date or time part (e.g. hour, month, day of week)
   * Assign a value based on the value in another column (e.g. TTC line number based on line values in the subway delay data)
   * Replace text in a column (e.g. replacing occurrences of "Street" with "St.")
"""

data_2023['WARD_NAME'] = data_2023['WARDNAME'].str.replace(' ','-')

#print(list(data_2023['WARD_NAME']))

data_2023['WARD_NAME'].value_counts()

data_2023['WARDNAME'].value_counts()

"""2. Remove one or more columns from the dataset."""

data_2023 = data_2023.drop(columns='WARDNAME')
data_2023.head(3)

"""3. Extract a subset of columns and rows to a new DataFrame
   * with the `.query()` method and column selecting `[[colnames]]`
   * with `.loc[]`
"""

data_2023.query('LAUNDRY_ROOMS.isna()').head()

data_2023.loc[data_2023['LAUNDRY_ROOMS'].isna()]

"""4. Investigate null values
   * Create and describe a DataFrame containing records with NaNs in any column
   * Create and describe a DataFrame containing records with NaNs in a subset of columns
   * If it makes sense to drop records with NaNs in certain columns from the original DataFrame, do so.
"""

Grouped_D =data_2023.groupby('WARD_NAME').size()
Grouped_D.plot.bar()
plt.title('Distribution of properties by WARDNAMEs')
plt.ylabel('Number of properties')
plt.savefig('Ward_properties.png')